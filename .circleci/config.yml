version: 2
jobs:
  build:
    machine:
      image: circleci/classic:201808-01
    working-directory: ~/website_v3

    steps:
      - checkout 

      - run:
          name: Set Python Version
          command: |
            pyenv global 3.6.5
            pip install requests

      - run:
          name: Build Info
          command: |
            docker-compose --version
            docker version
            python --version

      - run: 
          name: Build Containers
          command: |
            docker-compose build
            set -x
            docker run -d project_redis:latest
            docker run -d project_pytorch:latest
            docker run -d -p 80:8000 project_flaskapp:latest

      - run:
          name: List Containers
          command: |
            docker images
            docker ps

      - run:
          name: Install Dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0

      - run:
          name: Wait for Up
          command: |
            dockerize -wait http://localhost:80 -timeout 1m
  
      - run: 
          name: Run Tests
          command: |
            python ~/project/tests_compose.py

  deploy:
    docker:
      - image: circleci/golang:1.10
    steps:
      - attach_workspace:
          at: src
      - add_ssh_keys

      - run:
        name: Pull Containers
        command: |
          ssh-keyscan -H 192.168.1.162 >> ~/.ssh/known_hosts

#           -run :
#             name: Start service
#             command: |
#               echo 'example.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJiGRY6N9WYQ0vy6cTiwAgNbc6ueJmVo/EafBtmT7bcD6cQMbipYM/KfYQ2lCn2TxqWepZKYoyoVQXgArycCOns=' >> ~/.ssh/known_hosts
#               ssh root@example.com <<'ENDSSH'
#               docker pull myuser/myapp
#               docker-compose down
#               docker image rm -f $(docker images -q)
#               docker-compose up -d
#               ENDSSH
